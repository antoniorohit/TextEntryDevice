/**
 * Simple Read
 * 
 * Read data from the serial port and change the color of a rectangle
 * when a switch connected to a Wiring or Arduino board is pressed and released.
 */

import processing.serial.*;


char array[] = {
0,  //  0
0,  //  1
0,  //  2
0,  //  3
0,  //  4
0,  //  5
0,  //  6
0,  //  7
0,  //  8
0,  //  9
0,  //  10
0,  //  11
0,  //  12
0,  //  13
0,  //  14
0,  //  15
0,  //  16
0,  //  17
0,  //  18
0,  //  19
0,  //  20
0,  //  21
0,  //  22
0,  //  23
0,  //  24
0,  //  25
0,  //  26
0,  //  27
0,  //  28
0,  //  29
0,  //  30
0,  //  31
0,  //  32
0,  //  33
0,  //  34
0,  //  35
0,  //  36
0,  //  37
0,  //  38
0,  //  39
0,  //  40
0,  //  41
0,  //  42
0,  //  43
0,  //  44
0,  //  45
0,  //  46
0,  //  47
0,  //  48
0,  //  49
0,  //  50
0,  //  51
0,  //  52
0,  //  53
0,  //  54
0,  //  55
0,  //  56
0,  //  57
0,  //  58
0,  //  59
0,  //  60
0,  //  61
0,  //  62
0,  //  63
0,  //  64
0,  //  65
0,  //  66
0,  //  67
0,  //  68
0,  //  69
0,  //  70
0,  //  71
0,  //  72
0,  //  73
0,  //  74
0,  //  75
0,  //  76
0,  //  77
0,  //  78
0,  //  79
0,  //  80
0,  //  81
0,  //  82
0,  //  83
0,  //  84
0,  //  85
0,  //  86
0,  //  87
0,  //  88
'D',  //  89
0,  //  90
0,  //  91
0,  //  92
0,  //  93
0,  //  94
'F',  //  95
0,  //  96
0,  //  97
0,  //  98
0,  //  99
0,  //  100
0,  //  101
0,  //  102
0,  //  103
0,  //  104
0,  //  105
0,  //  106
0,  //  107
0,  //  108
0,  //  109
0,  //  110
0,  //  111
0,  //  112
0,  //  113
0,  //  114
0,  //  115
0,  //  116
0,  //  117
0,  //  118
0,  //  119
0,  //  120
0,  //  121
0,  //  122
0,  //  123
0,  //  124
0,  //  125
0,  //  126
'P',  //  127
0,  //  128
0,  //  129
0,  //  130
0,  //  131
0,  //  132
0,  //  133
0,  //  134
0,  //  135
0,  //  136
0,  //  137
0,  //  138
0,  //  139
0,  //  140
0,  //  141
0,  //  142
0,  //  143
0,  //  144
0,  //  145
'I',  //  146
0,  //  147
0,  //  148
'Y',  //  149
0,  //  150
'T',  //  151
0,  //  152
0,  //  153
0,  //  154
0,  //  155
0,  //  156
0,  //  157
0,  //  158
0,  //  159
0,  //  160
0,  //  161
0,  //  162
0,  //  163
0,  //  164
0,  //  165
0,  //  166
0,  //  167
0,  //  168
0,  //  169
0,  //  170
0,  //  171
0,  //  172
0,  //  173
0,  //  174
0,  //  175
0,  //  176
0,  //  177
0,  //  178
0,  //  179
0,  //  180
0,  //  181
0,  //  182
0,  //  183
0,  //  184
0,  //  185
0,  //  186
0,  //  187
0,  //  188
'V',  //  189
0,  //  190
0,  //  191
0,  //  192
0,  //  193
0,  //  194
0,  //  195
0,  //  196
0,  //  197
0,  //  198
0,  //  199
0,  //  200
0,  //  201
0,  //  202
0,  //  203
0,  //  204
0,  //  205
0,  //  206
0,  //  207
0,  //  208
0,  //  209
0,  //  210
0,  //  211
0,  //  212
0,  //  213
0,  //  214
0,  //  215
0,  //  216
0,  //  217
0,  //  218
'B',  //  219
0,  //  220
0,  //  221
0,  //  222
0,  //  223
0,  //  224
0,  //  225
0,  //  226
0,  //  227
0,  //  228
0,  //  229
0,  //  230
0,  //  231
0,  //  232
0,  //  233
0,  //  234
0,  //  235
0,  //  236
0,  //  237
0,  //  238
0,  //  239
0,  //  240
0,  //  241
0,  //  242
0,  //  243
0,  //  244
0,  //  245
0,  //  246
0,  //  247
0,  //  248
0,  //  249
0,  //  250
0,  //  251
0,  //  252
0,  //  253
0,  //  254
'R',  //  255
0,  //  256
0,  //  257
0,  //  258
0,  //  259
0,  //  260
0,  //  261
0,  //  262
0,  //  263
0,  //  264
0,  //  265
0,  //  266
0,  //  267
0,  //  268
0,  //  269
0,  //  270
0,  //  271
0,  //  272
0,  //  273
0,  //  274
0,  //  275
0,  //  276
0,  //  277
0,  //  278
0,  //  279
0,  //  280
0,  //  281
0,  //  282
0,  //  283
0,  //  284
0,  //  285
0,  //  286
0,  //  287
0,  //  288
0,  //  289
0,  //  290
0,  //  291
0,  //  292
0,  //  293
0,  //  294
0,  //  295
0,  //  296
0,  //  297
0,  //  298
0,  //  299
0,  //  300
0,  //  301
0,  //  302
0,  //  303
0,  //  304
0,  //  305
0,  //  306
0,  //  307
0,  //  308
0,  //  309
0,  //  310
0,  //  311
0,  //  312
0,  //  313
0,  //  314
0,  //  315
0,  //  316
0,  //  317
0,  //  318
0,  //  319
0,  //  320
0,  //  321
0,  //  322
0,  //  323
0,  //  324
0,  //  325
0,  //  326
0,  //  327
0,  //  328
0,  //  329
0,  //  330
0,  //  331
0,  //  332
0,  //  333
0,  //  334
0,  //  335
0,  //  336
0,  //  337
0,  //  338
0,  //  339
0,  //  340
'X',  //  341
0,  //  342
0,  //  343
0,  //  344
0,  //  345
0,  //  346
0,  //  347
0,  //  348
'K',  //  349
0,  //  350
0,  //  351
0,  //  352
0,  //  353
0,  //  354
0,  //  355
0,  //  356
0,  //  357
0,  //  358
0,  //  359
0,  //  360
0,  //  361
0,  //  362
0,  //  363
0,  //  364
0,  //  365
0,  //  366
'N',  //  367
0,  //  368
0,  //  369
0,  //  370
0,  //  371
0,  //  372
0,  //  373
0,  //  374
0,  //  375
0,  //  376
0,  //  377
0,  //  378
0,  //  379
0,  //  380
'H',  //  381
0,  //  382
'A',  //  383
0,  //  384
0,  //  385
0,  //  386
0,  //  387
0,  //  388
0,  //  389
0,  //  390
0,  //  391
0,  //  392
0,  //  393
0,  //  394
0,  //  395
0,  //  396
0,  //  397
0,  //  398
0,  //  399
0,  //  400
0,  //  401
0,  //  402
0,  //  403
0,  //  404
0,  //  405
0,  //  406
0,  //  407
0,  //  408
0,  //  409
0,  //  410
0,  //  411
0,  //  412
0,  //  413
0,  //  414
0,  //  415
0,  //  416
0,  //  417
0,  //  418
0,  //  419
0,  //  420
0,  //  421
0,  //  422
0,  //  423
0,  //  424
0,  //  425
0,  //  426
0,  //  427
0,  //  428
0,  //  429
0,  //  430
0,  //  431
0,  //  432
0,  //  433
0,  //  434
0,  //  435
0,  //  436
0,  //  437
'S',  //  438
0,  //  439
0,  //  440
0,  //  441
0,  //  442
0,  //  443
0,  //  444
0,  //  445
0,  //  446
'G',  //  447
0,  //  448
0,  //  449
0,  //  450
0,  //  451
0,  //  452
0,  //  453
0,  //  454
0,  //  455
0,  //  456
'L',  //  457
0,  //  458
0,  //  459
0,  //  460
0,  //  461
0,  //  462
'C',  //  463
0,  //  464
0,  //  465
0,  //  466
0,  //  467
0,  //  468
0,  //  469
0,  //  470
'Z',  //  471
0,  //  472
0,  //  473
0,  //  474
'Q',  //  475
0,  //  476
0,  //  477
0,  //  478
'E',  //  479
0,  //  480
0,  //  481
0,  //  482
0,  //  483
'J',  //  484
0,  //  485
0,  //  486
0,  //  487
0,  //  488
0,  //  489
0,  //  490
0,  //  491
0,  //  492
'U',  //  493
0,  //  494
'O',  //  495
0,  //  496
0,  //  497
0,  //  498
0,  //  499
0,  //  500
0,  //  501
0,  //  502
0,  //  503
0,  //  504
0,  //  505
0,  //  506
0,  //  507
0,  //  508
'W',  //  509
0,  //  510
'M',  //  511
' ', // 512 - Space
10,  // 513 backspace

};


Serial myPort;                          // Create object from Serial class
int SIZE_OF_BOX = 100;
int GREY = 204;
int BLACK = 0;
int WHITE = 255;
int NUM_BTNS = 9;

int i = 1;
int character = 0;
int val;// Data received from the serial port
int aggregate_val;
int temp;
int timeout = 1;
String words = "";
int word_len = 0;
char current_key = 1;

void setup() 
{
  size(300, 400);                      // to get 9 grids of 100x100
  String portName = Serial.list()[0];
  myPort = new Serial(this, portName, 9600);
  textFont(createFont("Georgia", 12));
  background(0);
}

void draw()
{
    background(0); // Set background to black

  timeout = millis();;
  aggregate_val = 0;
  while((millis()-timeout) < 1000)
  {
    if(myPort.available() > 0) {      // If data is available,
      val = 0;
      i = 100;
      temp = myPort.read();         // read it and store it in val
      while(temp != '\n' & i>=1)
      {
        val += (temp-'0')*(i);
        while(myPort.available() == 0); //wait for data
        temp = myPort.read();         // read it and store it in val
        i /= 10;    
      }
      if(i!=0)
      {
        val = val/(i*10);
      }

      aggregate_val |= val;
      draw_char(aggregate_val);
      
      print("Aggregate Value: ", aggregate_val);

     if(val != 0)
     {
       timeout = millis();
     } 
      print("Timeout: ", millis()-timeout, '\n');

    }
  }
  
  myPort.write(array[aggregate_val]);      // send the char back to the board
  switch(array[aggregate_val])
  {
    case 0:                          // null - no character
        current_key = 32;           // Space - so that nothing seems to be entered :)
        break;
    
    case 10:
        current_key  = 10;           // backspace
        if(word_len != 0)
        {
          word_len--;
          words = words.substring(0, word_len);
        }
        break;
        
    default:
      current_key = array[aggregate_val];
      words = words + current_key;
      word_len++;
      break;
  }
  
  text("Current key: " + current_key, 10, 320, 290, 330);
  text("Input Text: " + words, 10, 340, 290, 390);
}

void draw_char(int ag_val)
{
  int color_array[] = {0,0,0,0,0,0,0,0,0};
  
  if(ag_val < 512)          // 9 squares, 2^9 values :)
      for(int p = 0; p < 9; p++)
      {
        color_array[p] = (((ag_val) & (0x01<<p))>0 ? GREY : WHITE); 
      }
  
      fill(color_array[0]);
      rect(0*SIZE_OF_BOX, 0*SIZE_OF_BOX, SIZE_OF_BOX, SIZE_OF_BOX);
      fill(color_array[1]);
      rect(1*SIZE_OF_BOX, 0*SIZE_OF_BOX, SIZE_OF_BOX, SIZE_OF_BOX);
      fill(color_array[2]);
      rect(2*SIZE_OF_BOX, 0*SIZE_OF_BOX, SIZE_OF_BOX, SIZE_OF_BOX);
      fill(color_array[3]);
      rect(0*SIZE_OF_BOX, 1*SIZE_OF_BOX, SIZE_OF_BOX, SIZE_OF_BOX);
      fill(color_array[4]);
      rect(1*SIZE_OF_BOX, 1*SIZE_OF_BOX, SIZE_OF_BOX, SIZE_OF_BOX);
      fill(color_array[5]);
      rect(2*SIZE_OF_BOX, 1*SIZE_OF_BOX, SIZE_OF_BOX, SIZE_OF_BOX);
      fill(color_array[6]);
      rect(0*SIZE_OF_BOX, 2*SIZE_OF_BOX, SIZE_OF_BOX, SIZE_OF_BOX);
      fill(color_array[7]);
      rect(1*SIZE_OF_BOX, 2*SIZE_OF_BOX, SIZE_OF_BOX, SIZE_OF_BOX);
      fill(color_array[8]);
      rect(2*SIZE_OF_BOX, 2*SIZE_OF_BOX, SIZE_OF_BOX, SIZE_OF_BOX);

}

